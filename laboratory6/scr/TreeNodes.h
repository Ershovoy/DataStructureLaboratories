#pragma once

enum Child
{
	Left,
	Right
};

/// <summary>
/// Самобалансирующее АВЛ дерево, где для любого узла дерева высота его правого поддерева отличается 
/// от высоты левого поддерева не более чем на единицу.
/// </summary>
struct AVLTreeNode
{
	/// <summary>
	/// Ключ узла. АВЛ дерево не может хранить два узла с одинаковыми ключами.
	/// </summary>
	int Key;

	/// <summary>
	/// Высота заданного узла, это максимальная длина пути от этого узла к любому листу.
	/// </summary>
	short int Height;

	/// <summary>
	/// Указатели на дочернии узлы 0 - левый, 1 - правый.
	/// </summary>
	AVLTreeNode* Child[2];
};

/// <summary>
/// Самобалансирующее красно-чёрное дерево, где выполняются 4 условия:
/// 1. Каждая вершина — либо красная, либо черная.
/// 2. Каждый лист — черный.
/// 3. Если вершина красная, оба ее подузла черные.
/// 4. Все пути, идущие от корня к листьям, содержат одинаковое количество черных вершин
/// </summary>
struct RBTreeNode
{
	/// <summary>
	/// Ключ узла. Красно-чёрное дерево не может хранить два узла с одинаковыми ключами.
	/// </summary>
	int Key;

	/// <summary>
	/// true если узел чёрный и false если узел красный.
	/// </summary>
	bool IsBlack;

	/// <summary>
	/// Указатели на дочернии узлы 0 - левый, 1 - правый.
	/// </summary>
	RBTreeNode* Child[2];
};